// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	database "github.com/vague2k/rummage/pkg/database"
)

// RummageDbInterface is an autogenerated mock type for the RummageDbInterface type
type RummageDbInterface struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: entry
func (_m *RummageDbInterface) AddItem(entry string) (*database.RummageItem, error) {
	ret := _m.Called(entry)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 *database.RummageItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*database.RummageItem, error)); ok {
		return rf(entry)
	}
	if rf, ok := ret.Get(0).(func(string) *database.RummageItem); ok {
		r0 = rf(entry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.RummageItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(entry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddMultiItems provides a mock function with given fields: entries
func (_m *RummageDbInterface) AddMultiItems(entries ...string) ([]*database.RummageItem, int, error) {
	_va := make([]interface{}, len(entries))
	for _i := range entries {
		_va[_i] = entries[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddMultiItems")
	}

	var r0 []*database.RummageItem
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(...string) ([]*database.RummageItem, int, error)); ok {
		return rf(entries...)
	}
	if rf, ok := ret.Get(0).(func(...string) []*database.RummageItem); ok {
		r0 = rf(entries...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.RummageItem)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) int); ok {
		r1 = rf(entries...)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(...string) error); ok {
		r2 = rf(entries...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Close provides a mock function with given fields:
func (_m *RummageDbInterface) Close() {
	_m.Called()
}

// DeleteAllItems provides a mock function with given fields:
func (_m *RummageDbInterface) DeleteAllItems() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteItem provides a mock function with given fields: entry
func (_m *RummageDbInterface) DeleteItem(entry string) (*database.RummageItem, error) {
	ret := _m.Called(entry)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 *database.RummageItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*database.RummageItem, error)); ok {
		return rf(entry)
	}
	if rf, ok := ret.Get(0).(func(string) *database.RummageItem); ok {
		r0 = rf(entry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.RummageItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(entry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EntryWithHighestScore provides a mock function with given fields: substr
func (_m *RummageDbInterface) EntryWithHighestScore(substr string) (*database.RummageItem, error) {
	ret := _m.Called(substr)

	if len(ret) == 0 {
		panic("no return value specified for EntryWithHighestScore")
	}

	var r0 *database.RummageItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*database.RummageItem, error)); ok {
		return rf(substr)
	}
	if rf, ok := ret.Get(0).(func(string) *database.RummageItem); ok {
		r0 = rf(substr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.RummageItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(substr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindExactMatch provides a mock function with given fields: substr
func (_m *RummageDbInterface) FindExactMatch(substr string) (*database.RummageItem, error) {
	ret := _m.Called(substr)

	if len(ret) == 0 {
		panic("no return value specified for FindExactMatch")
	}

	var r0 *database.RummageItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*database.RummageItem, error)); ok {
		return rf(substr)
	}
	if rf, ok := ret.Get(0).(func(string) *database.RummageItem); ok {
		r0 = rf(substr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.RummageItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(substr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListItems provides a mock function with given fields:
func (_m *RummageDbInterface) ListItems() ([]*database.RummageItem, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListItems")
	}

	var r0 []*database.RummageItem
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*database.RummageItem, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*database.RummageItem); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.RummageItem)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectItem provides a mock function with given fields: entry
func (_m *RummageDbInterface) SelectItem(entry string) (*database.RummageItem, error) {
	ret := _m.Called(entry)

	if len(ret) == 0 {
		panic("no return value specified for SelectItem")
	}

	var r0 *database.RummageItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*database.RummageItem, error)); ok {
		return rf(entry)
	}
	if rf, ok := ret.Get(0).(func(string) *database.RummageItem); ok {
		r0 = rf(entry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.RummageItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(entry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: entry, score
func (_m *RummageDbInterface) UpdateItem(entry string, score float64) (*database.RummageItem, error) {
	ret := _m.Called(entry, score)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItem")
	}

	var r0 *database.RummageItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string, float64) (*database.RummageItem, error)); ok {
		return rf(entry, score)
	}
	if rf, ok := ret.Get(0).(func(string, float64) *database.RummageItem); ok {
		r0 = rf(entry, score)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.RummageItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string, float64) error); ok {
		r1 = rf(entry, score)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRummageDbInterface creates a new instance of RummageDbInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRummageDbInterface(t interface {
	mock.TestingT
	Cleanup(func())
},
) *RummageDbInterface {
	mock := &RummageDbInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
