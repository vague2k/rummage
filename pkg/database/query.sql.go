// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
)

const addItem = `-- name: AddItem :one
INSERT INTO rummage_items (
    entry, score, lastaccessed
) VALUES (
    ?, ?, ?
)
RETURNING entry, score, lastaccessed
`

type AddItemParams struct {
	Entry        string
	Score        float64
	Lastaccessed int64
}

func (q *Queries) AddItem(ctx context.Context, arg AddItemParams) (RummageItem, error) {
	row := q.db.QueryRowContext(ctx, addItem, arg.Entry, arg.Score, arg.Lastaccessed)
	var i RummageItem
	err := row.Scan(&i.Entry, &i.Score, &i.Lastaccessed)
	return i, err
}

const deleteAllItem = `-- name: DeleteAllItem :exec
;

DELETE FROM rummage_items
`

func (q *Queries) DeleteAllItem(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllItem)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
;

DELETE FROM rummage_items
WHERE entry = ?
`

func (q *Queries) DeleteItem(ctx context.Context, entry string) error {
	_, err := q.db.ExecContext(ctx, deleteItem, entry)
	return err
}

const entryWithHighestScore = `-- name: EntryWithHighestScore :one
;

SELECT entry, score, lastaccessed FROM rummage_items
WHERE entry LIKE ?
ORDER BY score
DESC LIMIT 1
`

func (q *Queries) EntryWithHighestScore(ctx context.Context, entry string) (RummageItem, error) {
	row := q.db.QueryRowContext(ctx, entryWithHighestScore, entry)
	var i RummageItem
	err := row.Scan(&i.Entry, &i.Score, &i.Lastaccessed)
	return i, err
}

const findTopNMatches = `-- name: FindTopNMatches :many
;

SELECT entry, score, lastaccessed FROM rummage_items
WHERE entry LIKE ?
ORDER BY score
DESC LIMIT ?
`

type FindTopNMatchesParams struct {
	Entry string
	Limit int64
}

func (q *Queries) FindTopNMatches(ctx context.Context, arg FindTopNMatchesParams) ([]RummageItem, error) {
	rows, err := q.db.QueryContext(ctx, findTopNMatches, arg.Entry, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RummageItem
	for rows.Next() {
		var i RummageItem
		if err := rows.Scan(&i.Entry, &i.Score, &i.Lastaccessed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectItem = `-- name: SelectItem :one
;


SELECT entry, score, lastaccessed FROM rummage_items
WHERE entry = ?
LIMIT 1
`

func (q *Queries) SelectItem(ctx context.Context, entry string) (RummageItem, error) {
	row := q.db.QueryRowContext(ctx, selectItem, entry)
	var i RummageItem
	err := row.Scan(&i.Entry, &i.Score, &i.Lastaccessed)
	return i, err
}

const updateItem = `-- name: UpdateItem :exec
;

UPDATE rummage_items
SET score = ?, lastaccessed = ?
WHERE entry = ?
RETURNING entry, score, lastaccessed
`

type UpdateItemParams struct {
	Score        float64
	Lastaccessed int64
	Entry        string
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.db.ExecContext(ctx, updateItem, arg.Score, arg.Lastaccessed, arg.Entry)
	return err
}
